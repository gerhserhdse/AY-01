package 递归;

import 栈和队列.SeqStack;

//括号匹配检查
public class BrakeMath{
    public boolean match(String expser){
        //构造一个顺序栈
        SeqStack<Character> stack =new SeqStack<Character>(expser.length());
        //循环获取表示式中的字符进行判断
        for (int i = 0; i <expser.length() ; i++) {
            //依次获取表达式的每个字符
            char ch=expser.charAt(i);
            //若是左括号,则进栈
            if(ch=='('||ch=='['){
                //字符进栈
                stack.push(ch);

            }else if(ch==')'){
                //若是右括号,判断栈是否为空,且括号是否是同一类
                if(!stack.isEmpty()&&stack.peek().equals('(')){
                    //条件成立,栈顶元素出栈

                    stack.pop();
                }else{
                    //条件不成立,右括号出栈.程序执行结束
                    return false;
                }
            }else if(ch==']'){
                if(!stack.isEmpty()&&stack.peek().equals('[')){
                    //条件成立 栈顶元素出栈
                    stack.pop();
                }else{
                    return  false;
                }
            }
        }
        //字符读取结束,判断栈顶是否为空,若为空,则括号匹配,若栈不空,则有多余的括号
        if(stack.isEmpty()){
            return true;
        }else
        {
            return  false;
        }
    }

}
class  Textkuohao{
    public static void main(String[] args) {
        //创建检查的表达式字符串
        String exp1="[1*(2+3)]/(5-3)";
        BrakeMath bm=new BrakeMath();
        if(bm.match(exp1)){
            System.out.println(exp1+"------括号匹配,是合法表达式");

        }else{
            System.out.println(exp1+"------括号不配,是非法表达式");
        }
        String exp2="[(])";
        if(bm.match(exp2)){
            System.out.println(exp1+"------括号匹配,是合法表达式");

        }else{
            System.out.println(exp2+"------括号不配,是非法表达式");
        }
    }
}
