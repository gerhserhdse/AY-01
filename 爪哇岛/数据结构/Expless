package 数据结构.zhan;


public class Expression中缀表达式转为后缀表达式 {
    //类中定义方法  infixTOPostfix 参数为中缀表达式串，返回值为转换后的后缀表达式
    public static String  infixTOPostfix(String infix){
        //在方法汇总，先创建，顺序栈，用于存放运算符
        SeqStack<String> stack=new SeqStack<String >(infix.length());
            //定义字符串 ，存放转换后的后缀表达式
            StringBuffer postfix=new StringBuffer();
            //定义循环，反复读取中缀表达式中的字符
            for(int i=0;i<infix.length();i++){
                //依次获取字符
                char ch=infix.charAt(i);
                //判断字符类型
                switch (ch){
                    case '('://若是左括号,直接入栈
                        stack.push(ch+"");
                        break;
                    case ')'://若是右括号,栈顶元suu反复出栈.并判断若不是左括号,元素出栈后添加到串中,若是左括号,直接出栈,while循环结束
                      String str=null;
                        while (!(str=stack.pop()).equals("(")){
                            postfix.append(str);
                        }
                    case '+':
                    case '-'://若是运算符,先与栈顶元素比较优先级,运算符是+或-时,只有栈顶元素是(,才会直接进栈,其他情况都是出栈
                        break;
                        case'*':
                    case'/'://若运算符是*或/时 ,与栈顶元素比较优先级,栈顶元素若是(+或-,会直接进栈,若栈顶元素时*或/,因是同级,所有出栈
                        while (!stack.isEmpty()&&(stack.peek().equals("*")||stack.peek().equals("/"))){
                            postfix.append(stack.pop());
                    }
                        stack.push(ch+" ");//当前运算符入栈
                        break;
                    default://若读取的不是运算符,而是数值,则直接添加到字符串中'
                        postfix.append(stack.pop());
                }

            }

        return  postfix.toString();
    }
    //计算后缀表达式的盒子
    public static  float calculate(String postfix){
        //方法中先创建链栈并初始化
        LinkededStack<Float> stack =new LinkededStack<Float>();
        //定义变量res表示计算结果
        float res=0;
        //for循环中读取字符串的字符并判断

        for(int i=0;i<postfix.length();i++){
            //通过charAt方法依次读取字符
            char ch=postfix.charAt(i);
            //判断读取的若是操作数,则数值入栈
            if(Character.isDigit(ch)){
                stack.push(Float.parseFloat(ch+" "));

            }else
            {
                //读取的若是运算符,则栈顶的两个元素接连出栈,存入变量num1 num2 中
                float num1=stack.pop();
                float num2=stack.pop();
                //使用switch语句判断运算符类型,并进行相应计算
                switch (ch){
                    case '+': res=num2+num1;break;
                    case '-': res=num2-num1;break;
                    case '*': res=num2*num1;break;
                    case '/': res=num2/num1;break;
                }
                //将计算结果在入栈
                stack.push(res);
            }
        }
        //最后栈顶元素及最终计算结果
        return stack.pop();
    }

}
