package 栈和队列;

import java.util.Queue;

/**
 * 顺序循环队列
 * @param <T>
 */
//TODO  为什么都不能实现接口
class SeCirQueue<T>/*implements Queue<T>*/{
    private  T[] queue=null;//声明一维数组,存储队列元素
    private  int length;//数组的大小,表示队列的最大容量
    private  int front;//表示队头位置
    private  int rear;//表示队尾位置
    //队列初始化
    public  SeCirQueue(){
        queue=(T[]) new Object[16];//构造一维的泛型数组,默认大小为16,存储队列元素
    length=16;
    front=rear=0;//初始队列为空

    }
    public SeCirQueue(int length){
        queue=(T[]) new Object[length];//构造一维的泛型数组,存储队列元素
        this.length=length;
        front=rear=0;//初始队列为空
    }
    //元素入队'
    public void equeue(T t){
        //判断队列是否已满,若已满,则抛出异常,若未满,则队尾位置向前移动 1 插入元素
        if(front==(rear+1)%length){
            throw  new RuntimeException("对列已满,元素不能入队");
        }else{
            rear=(rear+1)%length;
            queue[rear]=t;
        }
    }
    //出队
    public  T dequeue(){
        //判断队列是否为空,若为空,则抛出异常.若不为空,直接取出队头元素
        if(idEmpty()){
            throw new RuntimeException("队列为空,五元素取出");
        }else{
           front =(front+1)%length;      //TODO  看不懂
           T t=queue[front];
           queue[front]=null;
           return t;
        }
    }

    //判断队列是否为空
    public boolean idEmpty(){
        //队头和队尾指向同一个位置,表示队列为空
        return front==rear;
    }
    //取队头元素
    public T peek(){
        //判断队列是否为空,若为空,则抛出异常.若不为空,直接取出队头元素
        if(idEmpty()){
            throw new RuntimeException("队列为空,五元素取出");
        }else{
            return queue[front+1];//获取队头元素和出队区别在于,队头位置不移动
        }
    }

}
public class Sequential顺序队列<T> /* implements Queue<T> */{
    private  T[]queue =null;//声明一维数组,存储队列元素
    private int length;//数组的大小,表示队列的最大容量
    private  int front;//表示对头位置
    private  int  rear;//表示队尾位置
}
