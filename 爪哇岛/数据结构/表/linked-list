package 线性表链表.b站单链表;

import java.util.Iterator;
import java.util.function.Consumer;

public class LinkList <T>implements Iterable<T>{
    //记录头结点
    private  Node head;
    //记录链表的长度
    private  int N;



    //结点类
    private  class  Node{
        //存储数据
        T item;
        //下一个结点
        Node  next;
        public Node(T item,Node next){
            this.item=item;
            this.next=next;
        }
    }
    public LinkList(){
        //初始化头结点
        this.head=new Node(null,null);
        //初始化元素个数
        this.N=0;
    }
    //清空链表
    public void clear(){
        //使头结点不指向下一个元素
        head.next=null;
        //使链表元素为0
        this.N=0;

    }
    //获取链表的长度
    public int length(){
        return  N;
    }
    //判断表是否为空
    public boolean isEmpty(){
        return N==0;
    }
    //获取指定位置i处的元素
    public  T get(int i){

        //通过循环,从头结点开始查找,依次茶灶i次,就可以找到相对应的元素
        Node n=head.next;
        for (int index=0;index<i;index++){
            n=n.next;
        }
        return  n.item;
    }
    //向链表中添加元素t
    public  void insert(T t){

        //找到当前最后一个结点
        Node n=head;
        while (n.next!=null){
            n=n.next;
        }
        //创建新结点,保存元素t
        Node newNode=new Node(t,null);
        //让当前最后一个结点指向新节点
        n.next=newNode;
        //元素的个数加一
        N++;

    }
//向指定位置i处添加元素
    public void insert(int i,T t){
        //找到i位置前一个结点
        Node pre=head;
        for (int index=0; index<=i-1;index++){
            pre=pre.next;
        }
        //找到i位置的结点
        Node curr=pre.next;
        //创建新结点,并且新结点需要指向原来i位置的=结点
        Node newNode=new Node(t,curr);
        //原来i为孩子的前一个节点指向新结点即可
        pre.next=newNode;
        //元素个数+1
        N++;
    }
    //删除指定位置i处的元素,并返回被删除的元素
    public T remove(int i){
        //找到i位置的前一个结点
        Node pre=head;
        for (int index=0;index<=i-1;i++){
            pre=pre.next;
        }
        //要找到i位置的前一个结点
        Node  curr=pre.next;
        //找到i位置的下一个结点
        Node nextNode=curr.next;
        //前一个结点指向下一个结点
        pre.next=nextNode;
        //元素个数-1
        N--;
        return  curr.item;
    }
    //查找元素t在链表中第一次出现的位置'
    public int indexOF(T t){
        //从头结点开始,依次找到每一个结点,取出item,和t比较,如果相同 就找到了
        Node n=head;
        for(int i=0;n.next!=null;i++){
            n=n.next;
            if(n.item.equals(t)){
                return i;
            }
        }
        return -1;
    }
    @Override
    public Iterator<T> iterator() {
        return new Literator();
    }
    private  class Literator implements Iterator{
        private Node n;
        public Literator(){
            this.n=head;
        }

        @Override
        public boolean hasNext() {
            return n.next!=null;
        }

        @Override
        public Object next() {
            n=n.next;
            return n.item;
        }

        @Override
        public void remove() {
            Iterator.super.remove();
        }




    }

}


class Text{
    public static void main(String[] args) {
        LinkList<String > s1=new LinkList<>();
        s1.insert(0,"姚明");
        s1.insert(1,"别急");
        s1.insert(2,"展示");
        s1.insert(3,"李四");
        for (String s:s1) {
            System.out.println(s);
        }
        System.out.println("------------------");
        //测试获取
        String getReult=s1.get(2);
        System.out.println("获取索引2 处的元素的结果为"+getReult);
        //测试删除
        String removre= s1.remove(0);
        System.out.println("删除的元素是"+removre);
        //测试清空
        s1.clear();

        System.out.println("清空后的线性表的元素个数为：》"+s1.length());
    }
}
