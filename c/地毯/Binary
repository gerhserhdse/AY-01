
/*
*第一种
*/
#include<stdio.h>
#include<stdio.h>
int count_bit(unsigned int n)
{
	int count =0;
	while(n)
	{
		if(n%2==1)
		{
			count++;
		}
		n=n/2;
	}
	return count;
}
int main ()
{

	int a=0;
	scanf("%d",&a);
	int count=count_bit(a);
      printf("count=%d\n",count);
      system("pause");
      return 0;
}


/**
*第二种
*/
#include<stdio.h>
#include<stdio.h>
int count_bit(unsigned int n)
{
    int count =0;
   /* int i=0;
    for(i=0; i<32; i++)
    {
        if(((n>>i )& 1 )==1)
        {
            count ++;
        }
    }*/
    while(n)
    {
        n=n&(n-1);
        count++;
/**
     * n也就是键盘输入的数,这里假设为13
     * 13的二进制 是
     * 
     * 1101        n
     * 1100       n-1;
     *将n与n-1按位与赋值给n
     * 1100       n
     * 1011         n-1
     *  
     *  1000        n
     *  0111         n-1
     *
     *  0000    n
     * 以上操作了3次,每次都有一个1消失,也就是找到了一个1
     * 
     */
        
    }
    return count;

}
int main ()
{

    int a=0;
    scanf("%d",&a);
    int count=count_bit(a);
    printf("count=%d\n",count);
    //system("pause");
    return 0;
}




/*
*第三中,最简方法
*/

#include<stdio.h>
#include<stdio.h>
int count_bit(unsigned int n)
{
    int count =0;
    while(n)
    {
        n=n&(n-1);
        count++;
/**
     * n也就是键盘输入的数,这里假设为13
     * 13的二进制 是
     * 
     * 1101        n
     * 1100       n-1;
     *将n与n-1按位与赋值给n
     * 1100       n
     * 1011         n-1
     *  
     *  1000        n
     *  0111         n-1
     *
     *  0000    n
     * 以上操作了3次,每次都有一个1消失,也就是找到了一个1
     * 
     */      
    }
    return count;

}
int main ()
{

    int a=0;
    scanf("%d",&a);
    int count=count_bit(a);
    printf("count=%d\n",count);
    //system("pause");
    return 0;
}
