/**
*将浮点数存入内存
*/

int   main()
{
float   f=  5.5;
//5.5二进制是101.1
(-1)^0   *1.0011  *2^2
s=0    M=1.011    E=2;
现在存进二进制
//浮点数用科学计数法存储时  是  s 到 m到  e
而转为二进制存进内存时是s  e  m
0(s)     10000001(E+127(不管正数负数))      011(M去掉整数位)    000000000000000(补齐23位)
0  10000001  01100000000000000000000
0100   0000  1011   0000   0000    0000   0000    0000  
40    b(11)0    00  00   (十六进制)控制台显示地址
}


/**
*将浮点数从内存中拿出来
*/

一般情况下都为第一种
比如二进制为 0  10000001  01100000000000000000000
s=0  	E=129(10000001)-127=2     	M=1.001
所以f=(-1)^s  *M   *2^E   =5.5

E全为0时  也就是E的值是-127  
0   00000000     0110000000000000000000
+/-   0.011      *   2^-126  (无限接近0)


E全为1时 也就是E的值是128
//表示正负无穷大的数字


/**
* 应用
*/
int  main()
{
int   n=9;
//9的二进制是00000000 00000000 00000000 00001011
 float   *p=(float*)  &n;
printf("%d".n);//9

*p取0  00000000  00000000000000000001011(该地址中的数)
0.00000000000000000001011*2^-126=0
printf("%f",*p);//输出0.000000



*p=9.0;
//9放进去的二进制是:>0 10000010 0010000000000000000
2的30次方加2的25次方加2的20次方就是n的值
printf("%d",n);输出1091567616
printf("%f", *p);输出9


}
